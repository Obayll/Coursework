library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;

entity ssd_driver is
    GENERIC (k: integer);
    Port (Hex0, Hex1, Hex2     : in STD_LOGIC_VECTOR (2 downto 0);
          CLK, RST   : in STD_LOGIC;
          AN         : out STD_LOGIC_VECTOR (3 downto 0);
          SEG        : out STD_LOGIC_VECTOR (6 downto 0));
end ssd_driver;

architecture dataflow of ssd_driver is
    signal counter_up: unsigned(k-1 downto 0);
    signal seg_decoder_in: STD_LOGIC_VECTOR(2 downto 0);
    signal decoder2t4: STD_LOGIC_VECTOR(3 downto 0);
begin

with counter_up(k-1 downto k-2) select
    seg_decoder_in <= "000" when "00",
                      Hex0  when "01",
                      Hex1  when "10",
                      Hex2  when others;
                      
                      
with counter_up(k-1 downto k-2) select
    decoder2t4 <= "0001" when "00",
                  "0010" when "01",
                  "0100" when "10",
                  "1000" when others;

AN <= not decoder2t4; --OC                              
 
process (CLK)
    begin
        if rising_edge(CLK) then
            if RST = '1' then
                counter_up <= (OTHERS => '0');
            else
                counter_up <= counter_up + 1;
            end if;
                    end if;
    end process;
    
    seg <= 
       (6 => not(seg_decoder_in(0)),
        0 => not(seg_decoder_in(1)),
        3 => not(seg_decoder_in(2)),
        others => '1');

end dataflow;
